How To Implement Explosive Sum-
        options: 
            -looping through each iteration of x Number (dont want to do this, program will take to long to process for larger numbers)
            -[WORK IN PROGRESS]Matrix Calculation (currently thinking of a solution to fill out matrix and callback to any outputs)
            -Recursion could work, only concern is memory for larger numbers.

    Main Issue:
        Figuring out what algorithm to implement/how to implement.



Log:  9:30am    Started Working. Implemented initial code, read through instructions and tried figuring out how the problem workds.
     10:10am    Came Up With Personal_Notes.png as Possible Solution. Stopped for break.
     10:40am    Started Working. Trying to figure out how to implement Personal_Notes.png.
     11:30am    Trying to find a way to implement dynamic programming. (Im really struggling on coming up with a coding solution).
                    -might need a refresher on dynamic programming.
                Taking a break. (comeback and relearn on how to implement dynamic programming)
      2:30pm    Start Working. Learn how dynamic works with the current problem.
      3:30pm    Stopped Working. Dynamic programming might not be the correct solution. Probably recursion might be the correct solution.
                    -link that made me relize how dynamic programming might not be the correct solution, https://en.wikipedia.org/wiki/Partition_(number_theory)#.
      4:20pm    I was just reading the wikipedia article linked earlier.
      [Aug_07]
     11:40am   Started Working.
     12:17pm   https://en.wikipedia.org/wiki/Triangle_of_partition_numbers: source of why the problem is recursive.
      2:40pm   I'm calling it here. Will revisit once I get more practice problems under my belt. :(
      3:50pm   Implemented a nested loop which stores the number of times (n-1) appears plus the remainder. Stpped Working.

Thoughts:
    Aug05_4:20pm-Seems like an easy problem at first glance, but as I dugged deeper, the solution isn't clear a the moment. I'm done for now, going to continue "tomorrow".
    Aug_072:40pm-One of the more difficult problems that I've encountered. One thought I had was implementing a matrix/vector inwhich 

